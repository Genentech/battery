% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mock.R
\name{activeInput}
\alias{activeInput}
\title{shiny: input, output observeEvent and renderUI mocks with active binding and exosed data}
\usage{
activeInput(...)
}
\description{
usage:
}
\details{
empty input

input <- activeInput()

input with single ative binding

input <- activeInput(foo = function(value) {
   if (missing(value)) {
     self[["__foo"]]
   } else {
     self[["__foo"]] <- value
   }
})

NULL will create default setter/getter and inital active binding

input <- activeInput(foo = NULL)

observeEvent(input$foo, {
   print(paste0("value set to ", input$foo))
})

observeEvent just call input$on and it will create listener for reactive value
it will not create active binding so you need to call new first just in case you
don't know what the value is before observeEvent is called (can be called in component
constructor with self$ns as name the you can ten get call self$ns on component to create
actual biding after component is created)

input$new("foo") ## this will create active binding with default setter/getter

input$new(component$ns("save"))

reactive value with that may have different logic here same code as default

input#new("foo", function(value) {
   if (missing(value)) {
     self[["__foo"]]
   } else {
     self[["__foo"]] <- value
   }
})

if you set the value

input$foo <- 10

observer expression will be avaluated also input$listeners will have data for each listener
that will have data about each call to each listener with old and new values

usually there will be single listener for single active value
TODO: remove old listener after same expression is called again

Output and connection between input and output can be explained using this example code

##
input <- activeInput(foo = NULL)

input$foo <- 100

output <- activeOutput(bar = NULL)

output$bar <- renderUI({ input$foo + 10 })

print(output$bar) ## 110
input$foo <- 200
print(input$foo) ## 200
print(output$bar) ## 210

Function create mock for shiny input
}

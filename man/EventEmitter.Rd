% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EventEmitter.R
\docType{class}
\name{EventEmitter}
\alias{EventEmitter}
\title{Event emitter is inspired by multiple implementation in JavaScript}
\description{
it can be used indepentely of battery events to send data from one component
to different one, without the need to broadcast and emit events
it can be used with services, in addition to can also be used as reactive
values in shiny reactive context like renderUI or battery component render
function
}
\section{Methods}{

\describe{
  \item{Documentation}{For full documentation of each method go to https://stash.intranet.roche.com/stash/projects/DIVOS/repos/battery/browse}
  \item{\code{EventEmitter$new(...)}}{This method is used to create EventEmitter}
  \item{\code{on}}{Method add new handler for given event}
  \item{\code{emit}}{Method emit event add trigger all handlers added by \code{on}}
  \item{\code{off}}{Method removes single handler or all handlers and observer of no handler left}
  \item{\code{finalize}}{Destructor - clean up the data}
}
}

\examples{

e <- EventEmitter$new()
e$on("sessionCreated", function(value) {
  print(value$name)
})

## and in different part of the application

e$emit("sessionCreated", list(name = "My Session"))

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{.calls}}{- if EventEmitter is created with \code{spy = TRUE} it will add method calls to this list}

\item{\code{events}}{- environment with reactive objects if EventEmitter created wtih \code{shiny = TRUE},
otherwise it's normal environment but with R active bindings that can't be used in shiny render functions}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{EventEmitter$new()}}
\item \href{#method-on}{\code{EventEmitter$on()}}
\item \href{#method-emit}{\code{EventEmitter$emit()}}
\item \href{#method-off}{\code{EventEmitter$off()}}
\item \href{#method-finalize}{\code{EventEmitter$finalize()}}
\item \href{#method-clone}{\code{EventEmitter$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
if shiny option is used it will create ReactiveBinding with hack that always trigger
reactive context (the same cases the battery::component events - this is shiny bug)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$new(spy = FALSE, shiny = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{spy}}{- if set to \code{TRUE} it will log all method calls - for debugging}

\item{\code{shiny}}{- use this option if you need reactive value to trigger render handlers in shiny
Method add new handler for given event}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-on"></a>}}
\subsection{Method \code{on()}}{
create new observer if doesn't exists and add handler to the list
to that observer, we use single observer so ... will be of no use
on next handler on signle event, we keep it just in case it may be of use
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$on(events, handler, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{events}}{- string or character vector with name of the events}

\item{\code{handler}}{- function used as handler for give event}

\item{\code{...}}{- used only once for observeEvent if shiny mode is used
Method emit event add trigger all handlers added by \code{on}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-emit"></a>}}
\subsection{Method \code{emit()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$emit(name, data = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{- character - name of the event to fire}

\item{\code{data}}{- optional data that can be accessed in handler
Method removes single handler or all handlers and observer of no handler left}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-off"></a>}}
\subsection{Method \code{off()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$off(events, handler = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{events}}{- string or character vector with name of the events to destroy}

\item{\code{handler}}{- optional handler if not NULL it will remove only given handler
Destructor}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-finalize"></a>}}
\subsection{Method \code{finalize()}}{
clean up event handlers
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$finalize()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}

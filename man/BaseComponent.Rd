% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/components.R
\name{BaseComponent}
\alias{BaseComponent}
\title{Component base class}
\description{
Root component that don't have parent need to be called with input output and session
}
\details{
app <- App$new(input = input, output = output, session = session)
output$app <- renderUI({
   app$render()
})

the code will invoke initialize R6 class constructor and call constructor method
with remaining parameters added when creating new object

:: Services ::

services are global object that are unique per appliction and every component
can access then using self$service$name
they can be added using constructor using servies option or using service function
that will add new service to the system. It may be usefull to create as service
isntance of EventEmitter to share events across the appliction without the need
to broadcast and emit if you want to send message to siblings. You can use any
object as service.

Base class for components
}
\examples{
A <- R6::R6Class(
   classname = "A",
   inherit = battery::BaseComponent,
   public = list(
     x = NULL,
     constructor = function(x) {
        self$x <- x
     }
   )
)
i <- battery::activeInput()
o <- battery::activeOutput()
s <- list()
a <- A$new(x = 10, input = i, output = o, session = s)

## proper use of components
Button <- battery::component(
  classname = "Button",
  public = list(
    count = NULL,
    ## constructor is artifical method so you don't need to call super
    ## which you may forget to add
    constructor = function(canEdit = TRUE) {
      self$connect('click', self$ns('button'))
      self$count <- 0
      self$on('click', function(e = NULL, target = NULL) {
        self$count <- self$count + 1
      }, enabled = canEdit)
      self$output[[self$ns('buttonOutput')]] <- renderUI({
        self$events$click
        tags$div(
          tags$span(self$count),
          actionButton(self$ns('button'), 'click')
        )
      })
    },
    render = function() {
      tags$div(
        class = 'button-component',
        uiOutput(self$ns('buttonOutput'))
      )
    }
  )
)
Panel <- battery::component(
  classname = "Panel",
  public = list(
    title = NULL,
    constructor = function(title) {
      self$title <- title
      btn <- Button$new(parent = self)
      self$appendChild('button', btn)
      self$output[[self$ns('button')]] <- renderUI({
        btn$render()
      })
    },
    render = function() {
      tags$div(
        tags$h2(self$title),
        tags$div(uiOutput(self$ns('button')))
      )
    }
  )
)

## instead of mocks use objects from shiny server function

i <- battery::activeInput()
o <- battery::activeOutput()
s <- list()
panel <- Panel$new(title = "Hello", input = i, output = o, session = s)


}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{BaseComponent$new()}}
\item \href{#method-getById}{\code{BaseComponent$getById()}}
\item \href{#method-removeChild}{\code{BaseComponent$removeChild()}}
\item \href{#method-appendChild}{\code{BaseComponent$appendChild()}}
\item \href{#method-ns}{\code{BaseComponent$ns()}}
\item \href{#method-createEvent}{\code{BaseComponent$createEvent()}}
\item \href{#method-emit}{\code{BaseComponent$emit()}}
\item \href{#method-broadcast}{\code{BaseComponent$broadcast()}}
\item \href{#method-connect}{\code{BaseComponent$connect()}}
\item \href{#method-disconnect}{\code{BaseComponent$disconnect()}}
\item \href{#method-inObserver}{\code{BaseComponent$inObserver()}}
\item \href{#method-on}{\code{BaseComponent$on()}}
\item \href{#method-off}{\code{BaseComponent$off()}}
\item \href{#method-class}{\code{BaseComponent$class()}}
\item \href{#method-destroy}{\code{BaseComponent$destroy()}}
\item \href{#method-finalize}{\code{BaseComponent$finalize()}}
\item \href{#method-addService}{\code{BaseComponent$addService()}}
\item \href{#method-template}{\code{BaseComponent$template()}}
\item \href{#method-path}{\code{BaseComponent$path()}}
\item \href{#method-log}{\code{BaseComponent$log()}}
\item \href{#method-logger}{\code{BaseComponent$logger()}}
\item \href{#method-render}{\code{BaseComponent$render()}}
\item \href{#method-clone}{\code{BaseComponent$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$new(
  input = NULL,
  output = NULL,
  session = NULL,
  parent = NULL,
  component.name = NULL,
  services = NULL,
  spy = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getById"></a>}}
\subsection{Method \code{getById()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$getById(id)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-removeChild"></a>}}
\subsection{Method \code{removeChild()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$removeChild(name = NULL, child)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-appendChild"></a>}}
\subsection{Method \code{appendChild()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$appendChild(name, child)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ns"></a>}}
\subsection{Method \code{ns()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$ns(name)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-createEvent"></a>}}
\subsection{Method \code{createEvent()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$createEvent(name, value = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-emit"></a>}}
\subsection{Method \code{emit()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$emit(
  name,
  value = NULL,
  target = NULL,
  include.self = FALSE,
  .level = 0
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-broadcast"></a>}}
\subsection{Method \code{broadcast()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$broadcast(
  name,
  value = NULL,
  target = NULL,
  include.self = FALSE,
  .level = 0
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-connect"></a>}}
\subsection{Method \code{connect()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$connect(event, elementId)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-disconnect"></a>}}
\subsection{Method \code{disconnect()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$disconnect(elementId)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inObserver"></a>}}
\subsection{Method \code{inObserver()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$inObserver()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-on"></a>}}
\subsection{Method \code{on()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$on(
  events,
  handler,
  input = FALSE,
  enabled = TRUE,
  single = TRUE,
  init = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{handler}}{- function that should have value and target parameters}

\item{\code{input}}{- boolean that's indicate if event should be added to input}

\item{\code{enabled}}{- boolean that enable event to easy toggle event}

\item{\code{init}}{- indicate if event should be triggered on init}

\item{\code{event}}{- name of internal event or input id}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-off"></a>}}
\subsection{Method \code{off()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$off(events, handler = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-class"></a>}}
\subsection{Method \code{class()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$class()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-destroy"></a>}}
\subsection{Method \code{destroy()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$destroy()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-finalize"></a>}}
\subsection{Method \code{finalize()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$finalize()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addService"></a>}}
\subsection{Method \code{addService()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$addService(name, service)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-template"></a>}}
\subsection{Method \code{template()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$template(filename, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-path"></a>}}
\subsection{Method \code{path()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$path()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-log"></a>}}
\subsection{Method \code{log()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$log(levels, message, type = "battery", ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-logger"></a>}}
\subsection{Method \code{logger()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$logger(level, fn)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-render"></a>}}
\subsection{Method \code{render()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$render()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseComponent$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
